/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright 2021 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * Generated by Xtext 2.25.0
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package de.cau.cs.kieler.spviz.spviz.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.spviz.spviz.sPViz.SPViz;
import de.cau.cs.kieler.spviz.spviz.sPViz.SPVizPackage;
import de.cau.cs.kieler.spviz.spviz.sPViz.ShownConnection;
import de.cau.cs.kieler.spviz.spviz.sPViz.ShownElement;
import de.cau.cs.kieler.spviz.spviz.sPViz.View;
import de.cau.cs.kieler.spviz.spviz.services.SPVizGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class SPVizSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SPVizGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SPVizPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SPVizPackage.SP_VIZ:
				sequence_SPViz(context, (SPViz) semanticObject); 
				return; 
			case SPVizPackage.SHOWN_CONNECTION:
				sequence_ShownConnection(context, (ShownConnection) semanticObject); 
				return; 
			case SPVizPackage.SHOWN_ELEMENT:
				sequence_ShownElement(context, (ShownElement) semanticObject); 
				return; 
			case SPVizPackage.VIEW:
				sequence_View(context, (View) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SPViz returns SPViz
	 *
	 * Constraint:
	 *     (package=QualifiedName importURI=STRING name=ID views+=View*)
	 */
	protected void sequence_SPViz(ISerializationContext context, SPViz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShownConnection returns ShownConnection
	 *
	 * Constraint:
	 *     (shownConnection=[Connection|QualifiedName] via=[Artifact|QualifiedName]?)
	 */
	protected void sequence_ShownConnection(ISerializationContext context, ShownConnection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShownElement returns ShownElement
	 *
	 * Constraint:
	 *     (shownElement=[Artifact|QualifiedName] containedIn=[Artifact|QualifiedName]?)
	 */
	protected void sequence_ShownElement(ISerializationContext context, ShownElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     View returns View
	 *
	 * Constraint:
	 *     (name=ID shownElements+=ShownElement* shownConnections+=ShownConnection*)
	 */
	protected void sequence_View(ISerializationContext context, View semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

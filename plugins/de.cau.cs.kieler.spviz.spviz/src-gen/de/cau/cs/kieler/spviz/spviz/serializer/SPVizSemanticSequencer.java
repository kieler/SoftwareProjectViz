/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright 2023 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * Generated by Xtext 2.27.0
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package de.cau.cs.kieler.spviz.spviz.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.spviz.spviz.sPViz.ArtifactChain;
import de.cau.cs.kieler.spviz.spviz.sPViz.ArtifactShows;
import de.cau.cs.kieler.spviz.spviz.sPViz.ArtifactSource;
import de.cau.cs.kieler.spviz.spviz.sPViz.ArtifactView;
import de.cau.cs.kieler.spviz.spviz.sPViz.SPViz;
import de.cau.cs.kieler.spviz.spviz.sPViz.SPVizPackage;
import de.cau.cs.kieler.spviz.spviz.sPViz.ShownCategoryConnection;
import de.cau.cs.kieler.spviz.spviz.sPViz.ShownConnection;
import de.cau.cs.kieler.spviz.spviz.sPViz.ShownElement;
import de.cau.cs.kieler.spviz.spviz.sPViz.View;
import de.cau.cs.kieler.spviz.spviz.services.SPVizGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SPVizSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SPVizGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SPVizPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SPVizPackage.ARTIFACT_CHAIN:
				sequence_ArtifactChain(context, (ArtifactChain) semanticObject); 
				return; 
			case SPVizPackage.ARTIFACT_SHOWS:
				sequence_ArtifactShows(context, (ArtifactShows) semanticObject); 
				return; 
			case SPVizPackage.ARTIFACT_SOURCE:
				sequence_ArtifactSource(context, (ArtifactSource) semanticObject); 
				return; 
			case SPVizPackage.ARTIFACT_VIEW:
				sequence_ArtifactView(context, (ArtifactView) semanticObject); 
				return; 
			case SPVizPackage.SP_VIZ:
				sequence_SPViz(context, (SPViz) semanticObject); 
				return; 
			case SPVizPackage.SHOWN_CATEGORY_CONNECTION:
				sequence_ShownCategoryConnection(context, (ShownCategoryConnection) semanticObject); 
				return; 
			case SPVizPackage.SHOWN_CONNECTION:
				sequence_ShownConnection(context, (ShownConnection) semanticObject); 
				return; 
			case SPVizPackage.SHOWN_ELEMENT:
				sequence_ShownElement(context, (ShownElement) semanticObject); 
				return; 
			case SPVizPackage.VIEW:
				sequence_View(context, (View) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArtifactChain returns ArtifactChain
	 *
	 * Constraint:
	 *     (source=[Artifact|QualifiedName] further=ArtifactChain?)
	 * </pre>
	 */
	protected void sequence_ArtifactChain(ISerializationContext context, ArtifactChain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArtifactShows returns ArtifactShows
	 *
	 * Constraint:
	 *     (artifactShows=[Artifact|QualifiedName] views+=ArtifactView*)
	 * </pre>
	 */
	protected void sequence_ArtifactShows(ISerializationContext context, ArtifactShows semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArtifactSource returns ArtifactSource
	 *
	 * Constraint:
	 *     (artifact=[Artifact|QualifiedName] sourceChain=ArtifactChain)
	 * </pre>
	 */
	protected void sequence_ArtifactSource(ISerializationContext context, ArtifactSource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SPVizPackage.Literals.ARTIFACT_SOURCE__ARTIFACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SPVizPackage.Literals.ARTIFACT_SOURCE__ARTIFACT));
			if (transientValues.isValueTransient(semanticObject, SPVizPackage.Literals.ARTIFACT_SOURCE__SOURCE_CHAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SPVizPackage.Literals.ARTIFACT_SOURCE__SOURCE_CHAIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArtifactSourceAccess().getArtifactArtifactQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(SPVizPackage.Literals.ARTIFACT_SOURCE__ARTIFACT, false));
		feeder.accept(grammarAccess.getArtifactSourceAccess().getSourceChainArtifactChainParserRuleCall_2_0(), semanticObject.getSourceChain());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArtifactView returns ArtifactView
	 *
	 * Constraint:
	 *     (view=[View|ID] sources+=ArtifactSource*)
	 * </pre>
	 */
	protected void sequence_ArtifactView(ISerializationContext context, ArtifactView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SPViz returns SPViz
	 *
	 * Constraint:
	 *     (package=QualifiedName importURI=STRING name=ID views+=View* artifactShows+=ArtifactShows*)
	 * </pre>
	 */
	protected void sequence_SPViz(ISerializationContext context, SPViz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShownCategoryConnection returns ShownCategoryConnection
	 *
	 * Constraint:
	 *     (connection=[Connection|QualifiedName] sourceChain=ArtifactChain innerView=[View|QualifiedName])
	 * </pre>
	 */
	protected void sequence_ShownCategoryConnection(ISerializationContext context, ShownCategoryConnection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SPVizPackage.Literals.SHOWN_CATEGORY_CONNECTION__CONNECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SPVizPackage.Literals.SHOWN_CATEGORY_CONNECTION__CONNECTION));
			if (transientValues.isValueTransient(semanticObject, SPVizPackage.Literals.SHOWN_CATEGORY_CONNECTION__SOURCE_CHAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SPVizPackage.Literals.SHOWN_CATEGORY_CONNECTION__SOURCE_CHAIN));
			if (transientValues.isValueTransient(semanticObject, SPVizPackage.Literals.SHOWN_CATEGORY_CONNECTION__INNER_VIEW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SPVizPackage.Literals.SHOWN_CATEGORY_CONNECTION__INNER_VIEW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShownCategoryConnectionAccess().getConnectionConnectionQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(SPVizPackage.Literals.SHOWN_CATEGORY_CONNECTION__CONNECTION, false));
		feeder.accept(grammarAccess.getShownCategoryConnectionAccess().getSourceChainArtifactChainParserRuleCall_3_0(), semanticObject.getSourceChain());
		feeder.accept(grammarAccess.getShownCategoryConnectionAccess().getInnerViewViewQualifiedNameParserRuleCall_5_0_1(), semanticObject.eGet(SPVizPackage.Literals.SHOWN_CATEGORY_CONNECTION__INNER_VIEW, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShownConnection returns ShownConnection
	 *
	 * Constraint:
	 *     shownConnection=[Connection|QualifiedName]
	 * </pre>
	 */
	protected void sequence_ShownConnection(ISerializationContext context, ShownConnection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SPVizPackage.Literals.SHOWN_CONNECTION__SHOWN_CONNECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SPVizPackage.Literals.SHOWN_CONNECTION__SHOWN_CONNECTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShownConnectionAccess().getShownConnectionConnectionQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(SPVizPackage.Literals.SHOWN_CONNECTION__SHOWN_CONNECTION, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShownElement returns ShownElement
	 *
	 * Constraint:
	 *     (shownElement=[Artifact|QualifiedName] containedIn=[Artifact|QualifiedName]?)
	 * </pre>
	 */
	protected void sequence_ShownElement(ISerializationContext context, ShownElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     View returns View
	 *
	 * Constraint:
	 *     (name=ID shownElements+=ShownElement* shownConnections+=ShownConnection* shownCategoryConnections+=ShownCategoryConnection*)
	 * </pre>
	 */
	protected void sequence_View(ISerializationContext context, View semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

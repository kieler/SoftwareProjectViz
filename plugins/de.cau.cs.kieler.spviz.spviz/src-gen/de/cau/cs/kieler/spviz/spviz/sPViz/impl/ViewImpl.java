/**
 * generated by Xtext 2.22.0
 */
package de.cau.cs.kieler.spviz.spviz.sPViz.impl;

import de.cau.cs.kieler.spviz.spviz.sPViz.SPVizPackage;
import de.cau.cs.kieler.spviz.spviz.sPViz.ShownConnection;
import de.cau.cs.kieler.spviz.spviz.sPViz.ShownElement;
import de.cau.cs.kieler.spviz.spviz.sPViz.View;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>View</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.spviz.spviz.sPViz.impl.ViewImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.cau.cs.kieler.spviz.spviz.sPViz.impl.ViewImpl#getShownElements <em>Shown Elements</em>}</li>
 *   <li>{@link de.cau.cs.kieler.spviz.spviz.sPViz.impl.ViewImpl#getShownConnections <em>Shown Connections</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ViewImpl extends MinimalEObjectImpl.Container implements View
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getShownElements() <em>Shown Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShownElements()
   * @generated
   * @ordered
   */
  protected EList<ShownElement> shownElements;

  /**
   * The cached value of the '{@link #getShownConnections() <em>Shown Connections</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShownConnections()
   * @generated
   * @ordered
   */
  protected EList<ShownConnection> shownConnections;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SPVizPackage.Literals.VIEW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SPVizPackage.VIEW__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ShownElement> getShownElements()
  {
    if (shownElements == null)
    {
      shownElements = new EObjectContainmentEList<ShownElement>(ShownElement.class, this, SPVizPackage.VIEW__SHOWN_ELEMENTS);
    }
    return shownElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ShownConnection> getShownConnections()
  {
    if (shownConnections == null)
    {
      shownConnections = new EObjectContainmentEList<ShownConnection>(ShownConnection.class, this, SPVizPackage.VIEW__SHOWN_CONNECTIONS);
    }
    return shownConnections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SPVizPackage.VIEW__SHOWN_ELEMENTS:
        return ((InternalEList<?>)getShownElements()).basicRemove(otherEnd, msgs);
      case SPVizPackage.VIEW__SHOWN_CONNECTIONS:
        return ((InternalEList<?>)getShownConnections()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SPVizPackage.VIEW__NAME:
        return getName();
      case SPVizPackage.VIEW__SHOWN_ELEMENTS:
        return getShownElements();
      case SPVizPackage.VIEW__SHOWN_CONNECTIONS:
        return getShownConnections();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SPVizPackage.VIEW__NAME:
        setName((String)newValue);
        return;
      case SPVizPackage.VIEW__SHOWN_ELEMENTS:
        getShownElements().clear();
        getShownElements().addAll((Collection<? extends ShownElement>)newValue);
        return;
      case SPVizPackage.VIEW__SHOWN_CONNECTIONS:
        getShownConnections().clear();
        getShownConnections().addAll((Collection<? extends ShownConnection>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SPVizPackage.VIEW__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SPVizPackage.VIEW__SHOWN_ELEMENTS:
        getShownElements().clear();
        return;
      case SPVizPackage.VIEW__SHOWN_CONNECTIONS:
        getShownConnections().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SPVizPackage.VIEW__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SPVizPackage.VIEW__SHOWN_ELEMENTS:
        return shownElements != null && !shownElements.isEmpty();
      case SPVizPackage.VIEW__SHOWN_CONNECTIONS:
        return shownConnections != null && !shownConnections.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ViewImpl

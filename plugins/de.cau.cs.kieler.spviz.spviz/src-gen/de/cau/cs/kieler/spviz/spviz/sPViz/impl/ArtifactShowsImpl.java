/**
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright 2023 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * Generated by Xtext 2.27.0
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package de.cau.cs.kieler.spviz.spviz.sPViz.impl;

import de.cau.cs.kieler.spviz.spviz.sPViz.ArtifactShows;
import de.cau.cs.kieler.spviz.spviz.sPViz.ArtifactView;
import de.cau.cs.kieler.spviz.spviz.sPViz.SPVizPackage;

import de.cau.cs.kieler.spviz.spvizmodel.sPVizModel.Artifact;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Artifact Shows</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.spviz.spviz.sPViz.impl.ArtifactShowsImpl#getArtifactShows <em>Artifact Shows</em>}</li>
 *   <li>{@link de.cau.cs.kieler.spviz.spviz.sPViz.impl.ArtifactShowsImpl#getViews <em>Views</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ArtifactShowsImpl extends MinimalEObjectImpl.Container implements ArtifactShows
{
  /**
   * The cached value of the '{@link #getArtifactShows() <em>Artifact Shows</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArtifactShows()
   * @generated
   * @ordered
   */
  protected Artifact artifactShows;

  /**
   * The cached value of the '{@link #getViews() <em>Views</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViews()
   * @generated
   * @ordered
   */
  protected EList<ArtifactView> views;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArtifactShowsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SPVizPackage.Literals.ARTIFACT_SHOWS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Artifact getArtifactShows()
  {
    if (artifactShows != null && artifactShows.eIsProxy())
    {
      InternalEObject oldArtifactShows = (InternalEObject)artifactShows;
      artifactShows = (Artifact)eResolveProxy(oldArtifactShows);
      if (artifactShows != oldArtifactShows)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SPVizPackage.ARTIFACT_SHOWS__ARTIFACT_SHOWS, oldArtifactShows, artifactShows));
      }
    }
    return artifactShows;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Artifact basicGetArtifactShows()
  {
    return artifactShows;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArtifactShows(Artifact newArtifactShows)
  {
    Artifact oldArtifactShows = artifactShows;
    artifactShows = newArtifactShows;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SPVizPackage.ARTIFACT_SHOWS__ARTIFACT_SHOWS, oldArtifactShows, artifactShows));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ArtifactView> getViews()
  {
    if (views == null)
    {
      views = new EObjectContainmentEList<ArtifactView>(ArtifactView.class, this, SPVizPackage.ARTIFACT_SHOWS__VIEWS);
    }
    return views;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SPVizPackage.ARTIFACT_SHOWS__VIEWS:
        return ((InternalEList<?>)getViews()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SPVizPackage.ARTIFACT_SHOWS__ARTIFACT_SHOWS:
        if (resolve) return getArtifactShows();
        return basicGetArtifactShows();
      case SPVizPackage.ARTIFACT_SHOWS__VIEWS:
        return getViews();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SPVizPackage.ARTIFACT_SHOWS__ARTIFACT_SHOWS:
        setArtifactShows((Artifact)newValue);
        return;
      case SPVizPackage.ARTIFACT_SHOWS__VIEWS:
        getViews().clear();
        getViews().addAll((Collection<? extends ArtifactView>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SPVizPackage.ARTIFACT_SHOWS__ARTIFACT_SHOWS:
        setArtifactShows((Artifact)null);
        return;
      case SPVizPackage.ARTIFACT_SHOWS__VIEWS:
        getViews().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SPVizPackage.ARTIFACT_SHOWS__ARTIFACT_SHOWS:
        return artifactShows != null;
      case SPVizPackage.ARTIFACT_SHOWS__VIEWS:
        return views != null && !views.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ArtifactShowsImpl

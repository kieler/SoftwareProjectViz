/**
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright 2023 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * Generated by Xtext 2.27.0
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package de.cau.cs.kieler.spviz.spviz.sPViz.impl;

import de.cau.cs.kieler.spviz.spviz.sPViz.SPVizPackage;
import de.cau.cs.kieler.spviz.spviz.sPViz.ShownElement;

import de.cau.cs.kieler.spviz.spvizmodel.sPVizModel.Artifact;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Shown Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.spviz.spviz.sPViz.impl.ShownElementImpl#getShownElement <em>Shown Element</em>}</li>
 *   <li>{@link de.cau.cs.kieler.spviz.spviz.sPViz.impl.ShownElementImpl#getContainedIn <em>Contained In</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ShownElementImpl extends MinimalEObjectImpl.Container implements ShownElement
{
  /**
   * The cached value of the '{@link #getShownElement() <em>Shown Element</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShownElement()
   * @generated
   * @ordered
   */
  protected Artifact shownElement;

  /**
   * The cached value of the '{@link #getContainedIn() <em>Contained In</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainedIn()
   * @generated
   * @ordered
   */
  protected Artifact containedIn;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ShownElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SPVizPackage.Literals.SHOWN_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Artifact getShownElement()
  {
    if (shownElement != null && shownElement.eIsProxy())
    {
      InternalEObject oldShownElement = (InternalEObject)shownElement;
      shownElement = (Artifact)eResolveProxy(oldShownElement);
      if (shownElement != oldShownElement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SPVizPackage.SHOWN_ELEMENT__SHOWN_ELEMENT, oldShownElement, shownElement));
      }
    }
    return shownElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Artifact basicGetShownElement()
  {
    return shownElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShownElement(Artifact newShownElement)
  {
    Artifact oldShownElement = shownElement;
    shownElement = newShownElement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SPVizPackage.SHOWN_ELEMENT__SHOWN_ELEMENT, oldShownElement, shownElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Artifact getContainedIn()
  {
    if (containedIn != null && containedIn.eIsProxy())
    {
      InternalEObject oldContainedIn = (InternalEObject)containedIn;
      containedIn = (Artifact)eResolveProxy(oldContainedIn);
      if (containedIn != oldContainedIn)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SPVizPackage.SHOWN_ELEMENT__CONTAINED_IN, oldContainedIn, containedIn));
      }
    }
    return containedIn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Artifact basicGetContainedIn()
  {
    return containedIn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContainedIn(Artifact newContainedIn)
  {
    Artifact oldContainedIn = containedIn;
    containedIn = newContainedIn;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SPVizPackage.SHOWN_ELEMENT__CONTAINED_IN, oldContainedIn, containedIn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SPVizPackage.SHOWN_ELEMENT__SHOWN_ELEMENT:
        if (resolve) return getShownElement();
        return basicGetShownElement();
      case SPVizPackage.SHOWN_ELEMENT__CONTAINED_IN:
        if (resolve) return getContainedIn();
        return basicGetContainedIn();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SPVizPackage.SHOWN_ELEMENT__SHOWN_ELEMENT:
        setShownElement((Artifact)newValue);
        return;
      case SPVizPackage.SHOWN_ELEMENT__CONTAINED_IN:
        setContainedIn((Artifact)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SPVizPackage.SHOWN_ELEMENT__SHOWN_ELEMENT:
        setShownElement((Artifact)null);
        return;
      case SPVizPackage.SHOWN_ELEMENT__CONTAINED_IN:
        setContainedIn((Artifact)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SPVizPackage.SHOWN_ELEMENT__SHOWN_ELEMENT:
        return shownElement != null;
      case SPVizPackage.SHOWN_ELEMENT__CONTAINED_IN:
        return containedIn != null;
    }
    return super.eIsSet(featureID);
  }

} //ShownElementImpl

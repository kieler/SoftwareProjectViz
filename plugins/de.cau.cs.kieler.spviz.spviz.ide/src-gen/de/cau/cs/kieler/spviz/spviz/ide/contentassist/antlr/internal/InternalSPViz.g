/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright 2021 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * Generated by Xtext 2.25.0
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
grammar InternalSPViz;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.cau.cs.kieler.spviz.spviz.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.spviz.spviz.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.spviz.spviz.services.SPVizGrammarAccess;

}
@parser::members {
	private SPVizGrammarAccess grammarAccess;

	public void setGrammarAccess(SPVizGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSPViz
entryRuleSPViz
:
{ before(grammarAccess.getSPVizRule()); }
	 ruleSPViz
{ after(grammarAccess.getSPVizRule()); } 
	 EOF 
;

// Rule SPViz
ruleSPViz 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSPVizAccess().getGroup()); }
		(rule__SPViz__Group__0)
		{ after(grammarAccess.getSPVizAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleView
entryRuleView
:
{ before(grammarAccess.getViewRule()); }
	 ruleView
{ after(grammarAccess.getViewRule()); } 
	 EOF 
;

// Rule View
ruleView 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getViewAccess().getGroup()); }
		(rule__View__Group__0)
		{ after(grammarAccess.getViewAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShownElement
entryRuleShownElement
:
{ before(grammarAccess.getShownElementRule()); }
	 ruleShownElement
{ after(grammarAccess.getShownElementRule()); } 
	 EOF 
;

// Rule ShownElement
ruleShownElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShownElementAccess().getGroup()); }
		(rule__ShownElement__Group__0)
		{ after(grammarAccess.getShownElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShownConnection
entryRuleShownConnection
:
{ before(grammarAccess.getShownConnectionRule()); }
	 ruleShownConnection
{ after(grammarAccess.getShownConnectionRule()); } 
	 EOF 
;

// Rule ShownConnection
ruleShownConnection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShownConnectionAccess().getGroup()); }
		(rule__ShownConnection__Group__0)
		{ after(grammarAccess.getShownConnectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__0__Impl
	rule__SPViz__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getSPVizAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__1__Impl
	rule__SPViz__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getPackageAssignment_1()); }
	(rule__SPViz__PackageAssignment_1)
	{ after(grammarAccess.getSPVizAccess().getPackageAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__2__Impl
	rule__SPViz__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getImportKeyword_2()); }
	'import'
	{ after(grammarAccess.getSPVizAccess().getImportKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__3__Impl
	rule__SPViz__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getImportURIAssignment_3()); }
	(rule__SPViz__ImportURIAssignment_3)
	{ after(grammarAccess.getSPVizAccess().getImportURIAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__4__Impl
	rule__SPViz__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getSPVizKeyword_4()); }
	'SPViz'
	{ after(grammarAccess.getSPVizAccess().getSPVizKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__5__Impl
	rule__SPViz__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getNameAssignment_5()); }
	(rule__SPViz__NameAssignment_5)
	{ after(grammarAccess.getSPVizAccess().getNameAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__6__Impl
	rule__SPViz__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getSPVizAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__7__Impl
	rule__SPViz__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getViewsAssignment_7()); }
	(rule__SPViz__ViewsAssignment_7)*
	{ after(grammarAccess.getSPVizAccess().getViewsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SPViz__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSPVizAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getSPVizAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__View__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__View__Group__0__Impl
	rule__View__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getViewAccess().getNameAssignment_0()); }
	(rule__View__NameAssignment_0)
	{ after(grammarAccess.getViewAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__View__Group__1__Impl
	rule__View__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getViewAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getViewAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__View__Group__2__Impl
	rule__View__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getViewAccess().getShownElementsAssignment_2()); }
	(rule__View__ShownElementsAssignment_2)*
	{ after(grammarAccess.getViewAccess().getShownElementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__View__Group__3__Impl
	rule__View__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getViewAccess().getShownConnectionsAssignment_3()); }
	(rule__View__ShownConnectionsAssignment_3)*
	{ after(grammarAccess.getViewAccess().getShownConnectionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__View__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__View__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getViewAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getViewAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShownElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownElement__Group__0__Impl
	rule__ShownElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownElementAccess().getShowKeyword_0()); }
	'show'
	{ after(grammarAccess.getShownElementAccess().getShowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownElement__Group__1__Impl
	rule__ShownElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownElementAccess().getShownElementAssignment_1()); }
	(rule__ShownElement__ShownElementAssignment_1)
	{ after(grammarAccess.getShownElementAccess().getShownElementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownElementAccess().getGroup_2()); }
	(rule__ShownElement__Group_2__0)?
	{ after(grammarAccess.getShownElementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShownElement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownElement__Group_2__0__Impl
	rule__ShownElement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownElementAccess().getInKeyword_2_0()); }
	'in'
	{ after(grammarAccess.getShownElementAccess().getInKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownElement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownElementAccess().getContainedInAssignment_2_1()); }
	(rule__ShownElement__ContainedInAssignment_2_1)
	{ after(grammarAccess.getShownElementAccess().getContainedInAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShownConnection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownConnection__Group__0__Impl
	rule__ShownConnection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownConnectionAccess().getConnectKeyword_0()); }
	'connect'
	{ after(grammarAccess.getShownConnectionAccess().getConnectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownConnection__Group__1__Impl
	rule__ShownConnection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownConnectionAccess().getShownConnectionAssignment_1()); }
	(rule__ShownConnection__ShownConnectionAssignment_1)
	{ after(grammarAccess.getShownConnectionAccess().getShownConnectionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownConnection__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownConnectionAccess().getGroup_2()); }
	(rule__ShownConnection__Group_2__0)?
	{ after(grammarAccess.getShownConnectionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShownConnection__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownConnection__Group_2__0__Impl
	rule__ShownConnection__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownConnectionAccess().getViaKeyword_2_0()); }
	'via'
	{ after(grammarAccess.getShownConnectionAccess().getViaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShownConnection__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShownConnectionAccess().getViaAssignment_2_1()); }
	(rule__ShownConnection__ViaAssignment_2_1)
	{ after(grammarAccess.getShownConnectionAccess().getViaAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SPViz__PackageAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSPVizAccess().getPackageQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getSPVizAccess().getPackageQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__ImportURIAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSPVizAccess().getImportURISTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getSPVizAccess().getImportURISTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__NameAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSPVizAccess().getNameIDTerminalRuleCall_5_0()); }
		RULE_ID
		{ after(grammarAccess.getSPVizAccess().getNameIDTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SPViz__ViewsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSPVizAccess().getViewsViewParserRuleCall_7_0()); }
		ruleView
		{ after(grammarAccess.getSPVizAccess().getViewsViewParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__View__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getViewAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getViewAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__View__ShownElementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getViewAccess().getShownElementsShownElementParserRuleCall_2_0()); }
		ruleShownElement
		{ after(grammarAccess.getViewAccess().getShownElementsShownElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__View__ShownConnectionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getViewAccess().getShownConnectionsShownConnectionParserRuleCall_3_0()); }
		ruleShownConnection
		{ after(grammarAccess.getViewAccess().getShownConnectionsShownConnectionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__ShownElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShownElementAccess().getShownElementArtifactCrossReference_1_0()); }
		(
			{ before(grammarAccess.getShownElementAccess().getShownElementArtifactQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getShownElementAccess().getShownElementArtifactQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getShownElementAccess().getShownElementArtifactCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownElement__ContainedInAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShownElementAccess().getContainedInArtifactCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getShownElementAccess().getContainedInArtifactQualifiedNameParserRuleCall_2_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getShownElementAccess().getContainedInArtifactQualifiedNameParserRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getShownElementAccess().getContainedInArtifactCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__ShownConnectionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShownConnectionAccess().getShownConnectionConnectionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getShownConnectionAccess().getShownConnectionConnectionQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getShownConnectionAccess().getShownConnectionConnectionQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getShownConnectionAccess().getShownConnectionConnectionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShownConnection__ViaAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShownConnectionAccess().getViaArtifactCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getShownConnectionAccess().getViaArtifactQualifiedNameParserRuleCall_2_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getShownConnectionAccess().getViaArtifactQualifiedNameParserRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getShownConnectionAccess().getViaArtifactCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

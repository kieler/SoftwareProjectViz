/*
 * generated by Xtext 2.22.0
 */
package de.cau.cs.kieler.spviz.spvizmodel.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.spviz.spvizmodel.ide.contentassist.antlr.internal.InternalSPVizModelParser;
import de.cau.cs.kieler.spviz.spvizmodel.services.SPVizModelGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SPVizModelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SPVizModelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SPVizModelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getReferenceAccess().getAlternatives(), "rule__Reference__Alternatives");
			builder.put(grammarAccess.getSPVizModelAccess().getGroup(), "rule__SPVizModel__Group__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup(), "rule__Artifact__Group__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup_1(), "rule__Artifact__Group_1__0");
			builder.put(grammarAccess.getContainmentAccess().getGroup(), "rule__Containment__Group__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getSPVizModelAccess().getPackageAssignment_1(), "rule__SPVizModel__PackageAssignment_1");
			builder.put(grammarAccess.getSPVizModelAccess().getNameAssignment_3(), "rule__SPVizModel__NameAssignment_3");
			builder.put(grammarAccess.getSPVizModelAccess().getArtifactsAssignment_5(), "rule__SPVizModel__ArtifactsAssignment_5");
			builder.put(grammarAccess.getArtifactAccess().getNameAssignment_0(), "rule__Artifact__NameAssignment_0");
			builder.put(grammarAccess.getArtifactAccess().getReferencesAssignment_1_1(), "rule__Artifact__ReferencesAssignment_1_1");
			builder.put(grammarAccess.getContainmentAccess().getContainsAssignment_1(), "rule__Containment__ContainsAssignment_1");
			builder.put(grammarAccess.getConnectionAccess().getNameAssignment_0(), "rule__Connection__NameAssignment_0");
			builder.put(grammarAccess.getConnectionAccess().getConnectsToAssignment_2(), "rule__Connection__ConnectsToAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SPVizModelGrammarAccess grammarAccess;

	@Override
	protected InternalSPVizModelParser createParser() {
		InternalSPVizModelParser result = new InternalSPVizModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SPVizModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SPVizModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

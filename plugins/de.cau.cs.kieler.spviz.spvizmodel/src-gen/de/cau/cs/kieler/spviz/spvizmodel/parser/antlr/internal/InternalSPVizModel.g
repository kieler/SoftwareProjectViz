/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright 2021 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * Generated by Xtext 2.25.0
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
grammar InternalSPVizModel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cau.cs.kieler.spviz.spvizmodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.spviz.spvizmodel.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.spviz.spvizmodel.services.SPVizModelGrammarAccess;

}

@parser::members {

 	private SPVizModelGrammarAccess grammarAccess;

    public InternalSPVizModelParser(TokenStream input, SPVizModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SPVizModel";
   	}

   	@Override
   	protected SPVizModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSPVizModel
entryRuleSPVizModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSPVizModelRule()); }
	iv_ruleSPVizModel=ruleSPVizModel
	{ $current=$iv_ruleSPVizModel.current; }
	EOF;

// Rule SPVizModel
ruleSPVizModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getSPVizModelAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSPVizModelAccess().getPackageQualifiedNameParserRuleCall_1_0());
				}
				lv_package_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSPVizModelRule());
					}
					set(
						$current,
						"package",
						lv_package_1_0,
						"de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='SPVizModel'
		{
			newLeafNode(otherlv_2, grammarAccess.getSPVizModelAccess().getSPVizModelKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getSPVizModelAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSPVizModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getSPVizModelAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSPVizModelAccess().getArtifactsArtifactParserRuleCall_5_0());
				}
				lv_artifacts_5_0=ruleArtifact
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSPVizModelRule());
					}
					add(
						$current,
						"artifacts",
						lv_artifacts_5_0,
						"de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.Artifact");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSPVizModelAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleArtifact
entryRuleArtifact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArtifactRule()); }
	iv_ruleArtifact=ruleArtifact
	{ $current=$iv_ruleArtifact.current; }
	EOF;

// Rule Artifact
ruleArtifact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getArtifactAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArtifactRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getArtifactAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArtifactAccess().getReferencesReferenceParserRuleCall_1_1_0());
					}
					lv_references_2_0=ruleReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArtifactRule());
						}
						add(
							$current,
							"references",
							lv_references_2_0,
							"de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.Reference");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3='}'
			{
				newLeafNode(otherlv_3, grammarAccess.getArtifactAccess().getRightCurlyBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReferenceAccess().getContainmentParserRuleCall_0());
		}
		this_Containment_0=ruleContainment
		{
			$current = $this_Containment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReferenceAccess().getConnectionParserRuleCall_1());
		}
		this_Connection_1=ruleConnection
		{
			$current = $this_Connection_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContainment
entryRuleContainment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainmentRule()); }
	iv_ruleContainment=ruleContainment
	{ $current=$iv_ruleContainment.current; }
	EOF;

// Rule Containment
ruleContainment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='contains'
		{
			newLeafNode(otherlv_0, grammarAccess.getContainmentAccess().getContainsKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainmentRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getContainmentAccess().getContainsArtifactCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	iv_ruleConnection=ruleConnection
	{ $current=$iv_ruleConnection.current; }
	EOF;

// Rule Connection
ruleConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getConnectionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='depends'
		{
			newLeafNode(otherlv_1, grammarAccess.getConnectionAccess().getDependsKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getConnectionAccess().getDependsOnArtifactCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

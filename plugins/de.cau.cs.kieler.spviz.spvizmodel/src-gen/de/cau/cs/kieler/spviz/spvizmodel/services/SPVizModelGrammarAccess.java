/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright 2021 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * Generated by Xtext 2.25.0
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package de.cau.cs.kieler.spviz.spvizmodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SPVizModelGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SPVizModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.SPVizModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		private final Keyword cSPVizModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArtifactsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArtifactsArtifactParserRuleCall_5_0 = (RuleCall)cArtifactsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SPVizModel returns SPVizModel:
		//    'package' package=QualifiedName
		//    'SPVizModel' name=ID '{'
		//        artifacts += Artifact*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' package=QualifiedName
		//'SPVizModel' name=ID '{'
		//    artifacts += Artifact*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//package=QualifiedName
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_1_0() { return cPackageQualifiedNameParserRuleCall_1_0; }
		
		//'SPVizModel'
		public Keyword getSPVizModelKeyword_2() { return cSPVizModelKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//artifacts += Artifact*
		public Assignment getArtifactsAssignment_5() { return cArtifactsAssignment_5; }
		
		//Artifact
		public RuleCall getArtifactsArtifactParserRuleCall_5_0() { return cArtifactsArtifactParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.Artifact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReferencesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReferencesReferenceParserRuleCall_1_1_0 = (RuleCall)cReferencesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Artifact returns Artifact:
		//    name=ID ('{'
		//        references += Reference*
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('{'
		//    references += Reference*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('{'
		//       references += Reference*
		//   '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//references += Reference*
		public Assignment getReferencesAssignment_1_1() { return cReferencesAssignment_1_1; }
		
		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_1_1_0() { return cReferencesReferenceParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.Reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Reference returns Reference:
		//    Containment|Connection
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Containment|Connection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Containment
		public RuleCall getContainmentParserRuleCall_0() { return cContainmentParserRuleCall_0; }
		
		//Connection
		public RuleCall getConnectionParserRuleCall_1() { return cConnectionParserRuleCall_1; }
	}
	public class ContainmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.Containment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainsArtifactCrossReference_1_0 = (CrossReference)cContainsAssignment_1.eContents().get(0);
		private final RuleCall cContainsArtifactIDTerminalRuleCall_1_0_1 = (RuleCall)cContainsArtifactCrossReference_1_0.eContents().get(1);
		
		//Containment returns Containment:
		//    'contains' contains=[Artifact]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'contains' contains=[Artifact]
		public Group getGroup() { return cGroup; }
		
		//'contains'
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }
		
		//contains=[Artifact]
		public Assignment getContainsAssignment_1() { return cContainsAssignment_1; }
		
		//[Artifact]
		public CrossReference getContainsArtifactCrossReference_1_0() { return cContainsArtifactCrossReference_1_0; }
		
		//ID
		public RuleCall getContainsArtifactIDTerminalRuleCall_1_0_1() { return cContainsArtifactIDTerminalRuleCall_1_0_1; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cConnectsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConnectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConnectsArtifactCrossReference_2_0 = (CrossReference)cConnectsAssignment_2.eContents().get(0);
		private final RuleCall cConnectsArtifactIDTerminalRuleCall_2_0_1 = (RuleCall)cConnectsArtifactCrossReference_2_0.eContents().get(1);
		
		//Connection returns Connection:
		//    name=ID 'connects' connects=[Artifact]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'connects' connects=[Artifact]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'connects'
		public Keyword getConnectsKeyword_1() { return cConnectsKeyword_1; }
		
		//connects=[Artifact]
		public Assignment getConnectsAssignment_2() { return cConnectsAssignment_2; }
		
		//[Artifact]
		public CrossReference getConnectsArtifactCrossReference_2_0() { return cConnectsArtifactCrossReference_2_0; }
		
		//ID
		public RuleCall getConnectsArtifactIDTerminalRuleCall_2_0_1() { return cConnectsArtifactIDTerminalRuleCall_2_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.spviz.spvizmodel.SPVizModel.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final SPVizModelElements pSPVizModel;
	private final ArtifactElements pArtifact;
	private final ReferenceElements pReference;
	private final ContainmentElements pContainment;
	private final ConnectionElements pConnection;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SPVizModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSPVizModel = new SPVizModelElements();
		this.pArtifact = new ArtifactElements();
		this.pReference = new ReferenceElements();
		this.pContainment = new ContainmentElements();
		this.pConnection = new ConnectionElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.spviz.spvizmodel.SPVizModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SPVizModel returns SPVizModel:
	//    'package' package=QualifiedName
	//    'SPVizModel' name=ID '{'
	//        artifacts += Artifact*
	//    '}'
	//;
	public SPVizModelElements getSPVizModelAccess() {
		return pSPVizModel;
	}
	
	public ParserRule getSPVizModelRule() {
		return getSPVizModelAccess().getRule();
	}
	
	//Artifact returns Artifact:
	//    name=ID ('{'
	//        references += Reference*
	//    '}')?
	//;
	public ArtifactElements getArtifactAccess() {
		return pArtifact;
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}
	
	//Reference returns Reference:
	//    Containment|Connection
	//;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//Containment returns Containment:
	//    'contains' contains=[Artifact]
	//;
	public ContainmentElements getContainmentAccess() {
		return pContainment;
	}
	
	public ParserRule getContainmentRule() {
		return getContainmentAccess().getRule();
	}
	
	//Connection returns Connection:
	//    name=ID 'connects' connects=[Artifact]
	//;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
